// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc2974.Ralph.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc2974.Ralph.Robot;

/**
 *
 */
@SuppressWarnings("unused")
public class Drive extends Command {

	public Drive() {

		requires(Robot.driveTrain);
	}

	// Called just before this Command runs the first time
	protected void initialize() {
		SmartDashboard.putBoolean("Cheesy", false);
		SmartDashboard.putBoolean("Tank", false);
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
    	if(SmartDashboard.getBoolean("Cheesy")){
    		//double leftY = (-Robot.oi.left.getY() +1)/2;
    		double leftY = 
    		double rightY = Robot.oi.right.getY();
    		double rightX = -Robot.oi.right.getX();
    		double rightZrotate = -Robot.oi.right.getRawAxis(3);
    
    		Robot.driveTrain.setSpeeds(leftY*rightY, leftY*rightZrotate, leftY*rightX);
    		
    
    		
    	}
    //		else if(SmartDashboard.getBoolean("Tank")){	
//    		double leftY = Robot.oi.left.getY();
//    		double leftX = Robot.oi.left.getX();
//    		double rightY = Robot.oi.right.getY();
//    		double rightX = Robot.oi.right.getX();
//    		
//    		
//    		Robot.driveTrain.setSpeeds(leftY*rightY, leftY*rightX, leftY*leftX);
//
//    	}	
    	else{
    		double modifier = 2; //Above 2 will limit top speed, Default is 2
    		double forward = (Robot.oi.left.getY() + Robot.oi.right.getY()) / modifier;
            double turn = (Robot.oi.left.getY() - Robot.oi.right.getY()) / modifier;
            double strafe = -(Robot.oi.left.getX() + Robot.oi.right.getX()) / modifier;
            Robot.driveTrain.setSpeeds(forward, turn, strafe);
            Robot.driveTrain.setHalfSpeed(Robot.oi.right.getTrigger()); //Sets half speed when trigger pressed
    	}
    	/*
    	else{
    		double leftY = Robot.oi.left.getY();
	    	double rightY = Robot.oi.right.getY();
	    	boolean right_button1 = Robot.oi.right.getRawButton(1);
	    	
	    	Robot.driveTrain.setSpeedsManual(leftY,rightY);
	    	
	    	Robot.driveTrain.setHalfSpeed(right_button1);
    	}
    	*/
    }

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {

		return false;
	}

	// Called once after isFinished returns true
	protected void end() {
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
	}
}
