// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc2974.Ralph.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc2974.Ralph.Robot;

/**
 *
 */
public class AutonomousCommand extends Command {

	private Command current = null;

	public AutonomousCommand() {
		// Use requires() here to declare subsystem dependencies
		// eg. requires(chassis);

		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	// Called just before this Command runs the first time
	protected void initialize() {
		SmartDashboard.putNumber("Max Power", 0);
		SmartDashboard.putNumber("Time", 1);
		SmartDashboard.putNumber("elevatorHeight", 0);// placeholder values
		SmartDashboard.putNumber("elevatorRunTime", 1.0);
		SmartDashboard.putNumber("elevatorRunPower", 0.0);
		Robot.forklift.resetPot();

	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		SmartDashboard.putNumber("elevatorTarget", Robot.forklift.currentTarget());
		SmartDashboard.putNumber("elevatorError", Robot.forklift.currentError());
		SmartDashboard.putNumber("elevatorPosition", Robot.forklift.currentPosition());
		if (current == null) {
			if (Robot.oi.right.getRawButton(6)) {
				current = new MoveStraightByTime(
						SmartDashboard.getNumber("Max Power"),
						SmartDashboard.getNumber("Time"));
				Scheduler.getInstance().add(current);
			}
			if (Robot.oi.right.getRawButton(7)) {
				Robot.forklift.setPositionMode();
				current = new RaiseLowerAuton(
						SmartDashboard.getNumber("elevatorHeight"));
				Scheduler.getInstance().add(current);
			}
			if (Robot.oi.right.getRawButton(8)) {
				Robot.forklift.setPowerMode();
				current = new TestElevatorInPowerMode(
						SmartDashboard.getNumber("elevatorRunTime"),
						SmartDashboard.getNumber("elevatorRunPower"));
				Scheduler.getInstance().add(current);
			}
		} else {
			if (!current.isRunning()) {
				current = null;
			}

		}

	}

	// Make this return true when this Command no longer needs to run
	// execute()
	protected boolean isFinished() {

		return false;
	}

	// Called once after isFinished returns true
	protected void end() {

	}

	// Called when another command which requires one or more of the
	// same subsystems is scheduled to run
	protected void interrupted() {

	}
}
