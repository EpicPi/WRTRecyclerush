// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc2974.Ralph.commands;


import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc2974.Ralph.Robot;
import org.usfirst.frc2974.Ralph.autonomous.ForwardForTime;
import org.usfirst.frc2974.Ralph.autonomous.StrafeForTime;
import org.usfirst.frc2974.Ralph.autonomous.TurnForTime;


/**
 *
 */
@ SuppressWarnings ( "unused" )
public class AutonomousCommand extends Command
{

	public AutonomousCommand( )
	{

		// Use requires() here to declare subsystem dependencies
		// eg. requires(chassis);

		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}


	// Called just before this Command runs the first time
	protected void initialize( )
	{

	}


	// Called repeatedly when this Command is scheduled to run
	protected void execute( )
	{
		try
		{
		if ( SmartDashboard.getBoolean("Forward For Time") )
		{
			
			Scheduler.getInstance().add(new ForwardForTime(SmartDashboard.getNumber("Time To Travel"),SmartDashboard.getNumber("Forward = 1, Backward = -1")));
			SmartDashboard.putBoolean("Forward For Time",false);
		}
		else if ( SmartDashboard.getBoolean("Strafe For Time") )
		{
			Scheduler.getInstance().add(new StrafeForTime(SmartDashboard.getNumber("Time to Strafe"),SmartDashboard.getNumber("Strafe Right = 1, Strafe Left = -1")));
			SmartDashboard.putBoolean("Strafe For Time",false);
		}
		else if ( SmartDashboard.getBoolean("Turn For Time") )
		{
			Scheduler.getInstance().add(new TurnForTime(SmartDashboard.getNumber("Time to Turn", 5.0),SmartDashboard.getNumber("Turn Right = 1, Turn Left = -1", 5.0)));
			SmartDashboard.putBoolean("Turn For Time",false);
		}
		}
		catch(Exception e)
		{
			System.err.println("ERROR"+e.toString());
		}
	}


	// Make this return true when this Command no longer needs to run
	// execute()
	protected boolean isFinished( )
	{

		return false;
	}


	// Called once after isFinished returns true
	protected void end( )
	{

	}


	// Called when another command which requires one or more of the
	// same
	// subsystems is scheduled to run
	protected void interrupted( )
	{

	}
}
